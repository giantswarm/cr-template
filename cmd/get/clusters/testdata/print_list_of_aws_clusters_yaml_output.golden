apiVersion: v1
items:
- apiVersion: v1
  items:
  - apiVersion: provider.giantswarm.io/v1alpha1
    kind: AWSClusterConfig
    metadata:
      creationTimestamp: "2021-01-02T15:04:32Z"
      name: 1sad2-aws-cluster-config
      namespace: default
    spec:
      guest:
        credentialSecret:
          name: ""
          namespace: ""
        dnsZone: ""
        id: 1sad2
        name: test cluster 1
        owner: test
        releaseVersion: 12.0.0
      versionBundle:
        version: ""
  - apiVersion: provider.giantswarm.io/v1alpha1
    kind: AWSConfig
    metadata:
      creationTimestamp: "2021-01-02T15:04:32Z"
      name: 1sad2
      namespace: default
    spec:
      aws:
        api:
          elb:
            idleTimeoutSeconds: 0
          hostedZones: ""
        availabilityZones: 0
        az: ""
        credentialSecret:
          name: ""
          namespace: ""
        etcd:
          elb:
            idleTimeoutSeconds: 0
          hostedZones: ""
        hostedZones:
          api:
            name: ""
          etcd:
            name: ""
          ingress:
            name: ""
        ingress:
          elb:
            idleTimeoutSeconds: 0
          hostedZones: ""
        masters: null
        region: ""
        vpc:
          cidr: ""
          peerId: ""
          privateSubnetCidr: ""
          publicSubnetCidr: ""
          routeTableNames: null
        workers: null
      cluster:
        calico:
          cidr: 0
          mtu: 0
          subnet: ""
        customer:
          id: ""
        docker:
          daemon:
            cidr: ""
        etcd:
          altNames: ""
          domain: ""
          port: 0
          prefix: ""
        id: 1sad2
        kubernetes:
          api:
            clusterIPRange: ""
            domain: ""
            securePort: 0
          cloudProvider: ""
          dns:
            ip: ""
          domain: ""
          ingressController:
            docker:
              image: ""
            domain: ""
            insecurePort: 0
            securePort: 0
            wildcardDomain: ""
          kubelet:
            altNames: ""
            domain: ""
            labels: ""
            port: 0
          networkSetup:
            docker:
              image: ""
            kubeProxy:
              conntrackMaxPerCore: 0
          ssh:
            userList: null
        masters: null
        scaling:
          max: 0
          min: 0
        version: ""
      versionBundle:
        version: ""
    status:
      aws:
        autoScalingGroup:
          name: ""
        availabilityZones: null
      cluster:
        network:
          cidr: ""
        scaling:
          desiredCapacity: 0
  kind: List
  metadata: {}
- apiVersion: v1
  items:
  - apiVersion: provider.giantswarm.io/v1alpha1
    kind: AWSClusterConfig
    metadata:
      creationTimestamp: "2021-01-02T15:04:32Z"
      name: 2a03f-aws-cluster-config
      namespace: default
    spec:
      guest:
        credentialSecret:
          name: ""
          namespace: ""
        dnsZone: ""
        id: 2a03f
        name: test cluster 2
        owner: test
        releaseVersion: 11.0.0
      versionBundle:
        version: ""
  - apiVersion: provider.giantswarm.io/v1alpha1
    kind: AWSConfig
    metadata:
      creationTimestamp: "2021-01-02T15:04:32Z"
      name: 2a03f
      namespace: default
    spec:
      aws:
        api:
          elb:
            idleTimeoutSeconds: 0
          hostedZones: ""
        availabilityZones: 0
        az: ""
        credentialSecret:
          name: ""
          namespace: ""
        etcd:
          elb:
            idleTimeoutSeconds: 0
          hostedZones: ""
        hostedZones:
          api:
            name: ""
          etcd:
            name: ""
          ingress:
            name: ""
        ingress:
          elb:
            idleTimeoutSeconds: 0
          hostedZones: ""
        masters: null
        region: ""
        vpc:
          cidr: ""
          peerId: ""
          privateSubnetCidr: ""
          publicSubnetCidr: ""
          routeTableNames: null
        workers: null
      cluster:
        calico:
          cidr: 0
          mtu: 0
          subnet: ""
        customer:
          id: ""
        docker:
          daemon:
            cidr: ""
        etcd:
          altNames: ""
          domain: ""
          port: 0
          prefix: ""
        id: 2a03f
        kubernetes:
          api:
            clusterIPRange: ""
            domain: ""
            securePort: 0
          cloudProvider: ""
          dns:
            ip: ""
          domain: ""
          ingressController:
            docker:
              image: ""
            domain: ""
            insecurePort: 0
            securePort: 0
            wildcardDomain: ""
          kubelet:
            altNames: ""
            domain: ""
            labels: ""
            port: 0
          networkSetup:
            docker:
              image: ""
            kubeProxy:
              conntrackMaxPerCore: 0
          ssh:
            userList: null
        masters: null
        scaling:
          max: 0
          min: 0
        version: ""
      versionBundle:
        version: ""
    status:
      aws:
        autoScalingGroup:
          name: ""
        availabilityZones: null
      cluster:
        conditions:
        - lastTransitionTime: null
          status: ""
          type: Created
        network:
          cidr: ""
        scaling:
          desiredCapacity: 0
  kind: List
  metadata: {}
- apiVersion: v1
  items:
  - apiVersion: provider.giantswarm.io/v1alpha1
    kind: AWSClusterConfig
    metadata:
      creationTimestamp: "2021-01-02T15:04:32Z"
      name: asd29-aws-cluster-config
      namespace: default
    spec:
      guest:
        credentialSecret:
          name: ""
          namespace: ""
        dnsZone: ""
        id: asd29
        name: test cluster 3
        owner: test
        releaseVersion: 10.5.0
      versionBundle:
        version: ""
  - apiVersion: provider.giantswarm.io/v1alpha1
    kind: AWSConfig
    metadata:
      creationTimestamp: "2021-01-02T15:04:32Z"
      name: asd29
      namespace: default
    spec:
      aws:
        api:
          elb:
            idleTimeoutSeconds: 0
          hostedZones: ""
        availabilityZones: 0
        az: ""
        credentialSecret:
          name: ""
          namespace: ""
        etcd:
          elb:
            idleTimeoutSeconds: 0
          hostedZones: ""
        hostedZones:
          api:
            name: ""
          etcd:
            name: ""
          ingress:
            name: ""
        ingress:
          elb:
            idleTimeoutSeconds: 0
          hostedZones: ""
        masters: null
        region: ""
        vpc:
          cidr: ""
          peerId: ""
          privateSubnetCidr: ""
          publicSubnetCidr: ""
          routeTableNames: null
        workers: null
      cluster:
        calico:
          cidr: 0
          mtu: 0
          subnet: ""
        customer:
          id: ""
        docker:
          daemon:
            cidr: ""
        etcd:
          altNames: ""
          domain: ""
          port: 0
          prefix: ""
        id: asd29
        kubernetes:
          api:
            clusterIPRange: ""
            domain: ""
            securePort: 0
          cloudProvider: ""
          dns:
            ip: ""
          domain: ""
          ingressController:
            docker:
              image: ""
            domain: ""
            insecurePort: 0
            securePort: 0
            wildcardDomain: ""
          kubelet:
            altNames: ""
            domain: ""
            labels: ""
            port: 0
          networkSetup:
            docker:
              image: ""
            kubeProxy:
              conntrackMaxPerCore: 0
          ssh:
            userList: null
        masters: null
        scaling:
          max: 0
          min: 0
        version: ""
      versionBundle:
        version: ""
    status:
      aws:
        autoScalingGroup:
          name: ""
        availabilityZones: null
      cluster:
        conditions:
        - lastTransitionTime: null
          status: ""
          type: Created
        - lastTransitionTime: null
          status: ""
          type: Creating
        network:
          cidr: ""
        scaling:
          desiredCapacity: 0
  kind: List
  metadata: {}
- apiVersion: infrastructure.giantswarm.io/v1alpha2
  kind: AWSCluster
  metadata:
    creationTimestamp: "2021-01-02T15:04:32Z"
    labels:
      giantswarm.io/organization: some-other
      release.giantswarm.io/version: 11.0.0
    name: f930q
    namespace: default
  spec:
    cluster:
      description: test cluster 4
      dns:
        domain: ""
      kubeProxy: {}
      oidc:
        claims: {}
    provider:
      credentialSecret:
        name: ""
        namespace: ""
      master:
        availabilityZone: ""
        instanceType: ""
      pods: {}
      region: ""
  status:
    cluster: {}
    provider:
      network: {}
- apiVersion: infrastructure.giantswarm.io/v1alpha2
  kind: AWSCluster
  metadata:
    creationTimestamp: "2021-01-02T15:04:32Z"
    labels:
      giantswarm.io/organization: test
      release.giantswarm.io/version: 9.0.0
    name: 9f012
    namespace: default
  spec:
    cluster:
      description: test cluster 5
      dns:
        domain: ""
      kubeProxy: {}
      oidc:
        claims: {}
    provider:
      credentialSecret:
        name: ""
        namespace: ""
      master:
        availabilityZone: ""
        instanceType: ""
      pods: {}
      region: ""
  status:
    cluster:
      conditions:
      - condition: Deleting
        lastTransitionTime: null
    provider:
      network: {}
- apiVersion: infrastructure.giantswarm.io/v1alpha2
  kind: AWSCluster
  metadata:
    creationTimestamp: "2021-01-02T15:04:32Z"
    labels:
      giantswarm.io/organization: random
      release.giantswarm.io/version: 10.5.0
    name: 2f0as
    namespace: default
  spec:
    cluster:
      description: test cluster 6
      dns:
        domain: ""
      kubeProxy: {}
      oidc:
        claims: {}
    provider:
      credentialSecret:
        name: ""
        namespace: ""
      master:
        availabilityZone: ""
        instanceType: ""
      pods: {}
      region: ""
  status:
    cluster:
      conditions:
      - condition: Deleting
        lastTransitionTime: null
      - condition: Created
        lastTransitionTime: null
    provider:
      network: {}
kind: List
metadata: {}
